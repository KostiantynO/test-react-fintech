{"version":3,"file":"static/js/main.13f3a76e.js","mappings":"yBACA,IAAMA,EAAe,IAAIC,KAAKC,aAAa,GAAI,CAC7CC,sBAAuB,EACvBC,sBAAuB,IAYnBC,EATsB,SAACC,EAAD,WAAWC,UAAAA,OAAX,MAAuB,GAAvB,SAC1BP,EACGQ,cAAcF,GACdG,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,MACM,YAATD,EAAqB,IAAe,UAATA,EAAmBH,EAAYI,KAE3DC,KAAK,IAGQC,CADH,aACwB,CAAEN,UAAW,MACpDO,QAAQC,IAAIV,GChBL,ICOP,EDP8B,CAC5BW,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,eAClCE,MAAOH,SAASC,cAAc,uBAC9BG,KAAMJ,SAASC,cAAc,uBCGvBE,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAEfC,OAAOC,iBAAiB,QAAQ,kBAAOH,EAAMT,MAAQ,MAErD,IAAMa,EAAa,aAEbC,EAAW,gCAEXC,EAAc,SAAAC,GAClB,IACMC,EADSD,EAAEE,OAAOlB,MAAMmB,OAE3BC,QAAQP,EAAY,IACpBO,QAAQN,EAAU,UAErBE,EAAEE,OAAOlB,MAAQiB,EACjBd,QAAQC,IAAI,iBAAkBY,EAAEE,OAAOlB,QAGzCS,EAAMG,iBAAiB,CAAC,SAAUG,EAAa,CAAEM,SAAS,IAC1DZ,EAAMG,iBAAiB,CAAC,UAAWG,EAAa,CAAEM,SAAS,IA2B3DZ,EAAMG,iBAAiB,WAzBA,SAAAU,GAErB,GACEA,EAAMC,iBAAiB,SACvBD,EAAMC,iBAAiB,YACvBD,EAAMC,iBAAiB,OAEvBpB,QAAQC,IAAI,oCALd,CASA,IAAQoB,EAAQF,EAARE,IAEW,IAAfA,EAAIC,QAAwB,OAARD,GAOnBA,EAAM,KAAOA,EAAM,MAAgB,MAARA,GAAuB,MAARA,IAC7CrB,QAAQC,IAAI,4DACZkB,EAAMI,kBARNvB,QAAQC,IAAI,wCAoBhBM,EAAKE,iBAAiB,UAPD,SAAAI,GACnBA,EAAEU,iBACF,IAAQ1B,EAAUgB,EAAEE,OAAOS,SAASC,YAA5B5B,MAERe,EADc,CAAEG,OAAQ,CAAElB,MAAAA,Q","sources":["helpers/format-number.js","utils/get-refs.js","helpers/input-mask.js"],"sourcesContent":["/* || TASK 1 ====== Vanila JS - format number ====== */\nconst numberFormat = new Intl.NumberFormat([], {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = (number, { separator = '' }) =>\n  numberFormat\n    .formatToParts(number)\n    .map(({ type, value }) =>\n      type === 'decimal' ? '.' : type === 'group' ? separator : value\n    )\n    .join('');\n\nconst string = '3123123.00';\nconst formatted = formatNumber(string, { separator: ' ' });\nconsole.log(formatted); // \"3 123 123.00\"\n","export const getRefs = () => ({\n  root: document.querySelector('#root'),\n  modalRoot: document.querySelector('#modal-root'),\n  input: document.querySelector('[data-input-masked]'),\n  form: document.querySelector('[data-form-masked]'),\n});\n","// 2) сделать маску ввода на инпуте\n// например для суммы с копейками * .00\n// (если отличается от маски то не вводится ничего)\n// Вместо * любое количество цифр, там где 00(это две любые цифры)\n\n/* || TASK 2 ====== Vanila JS - input mask ====== */\nimport { getRefs } from 'utils';\nconst { input, form } = getRefs();\n\nwindow.addEventListener('load', () => (input.value = ''));\n\nconst nonNumeric = /[^+0-9.-]/g;\n//////////////////////////////////////// /^[^0|\\D]\\d{0,9}(\\.\\d{1,2})?$\nconst afterDot = /(^-?\\d*?)(\\.{0,1})(\\d{0,2}?)/g;\n/////////////////////////////////////////(^\\-?\\d*?)([.]?)(\\d{1,2}?).?$\nconst updateInput = e => {\n  const string = e.target.value.trim();\n  const replacedNonDigits = string\n    .replace(nonNumeric, '')\n    .replace(afterDot, '$1$2$3');\n\n  e.target.value = replacedNonDigits;\n  console.log('e.target.value', e.target.value);\n};\n\ninput.addEventListener(['keyup'], updateInput, { passive: true });\ninput.addEventListener(['change'], updateInput, { passive: true });\n\nconst preventKeyDown = event => {\n  // Allow keyboard shortcuts\n  if (\n    event.getModifierState('Meta') ||\n    event.getModifierState('Control') ||\n    event.getModifierState('Alt')\n  ) {\n    console.log('Meta, Control or Alt pressed');\n    return;\n  }\n\n  const { key } = event;\n  // Allow non-printable keys\n  if (key.length !== 1 || key === '\\x00') {\n    console.log(\"key.length !== 1 || key === '\\x00'\");\n    return;\n  }\n\n  // Prevent any non-numeric keys, but allow . for decimals\n  // and - for negative values\n  if ((key < '0' || key > '9') && key !== '.' && key !== '-') {\n    console.log(\"((key < '0' || key > '9') && key !== '.' && key !== '-')\");\n    event.preventDefault();\n  }\n};\ninput.addEventListener('keydown', preventKeyDown);\n\nconst handleSubmit = e => {\n  e.preventDefault();\n  const { value } = e.target.elements.maskedInput;\n  const event = { target: { value } };\n  updateInput(event);\n};\n\nform.addEventListener('submit', handleSubmit);\n\n// $(\"input[name='masknumber']\").on('keyup change', function () {\n//   $(\"input[name='number']\").val(destroyMask(this.value));\n//   this.value = createMask($(\"input[name='number']\").val());\n// });\n\n// function createMask(string) {\n//   return string.replace(/(\\d{2})(\\d{3})(\\d{2})/, '$1-$2-$3');\n// }\n\n// function destroyMask(string) {\n//   return string.replace(/\\D/g, '').substring(0, 8);\n// }\n"],"names":["numberFormat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","formatted","number","separator","formatToParts","map","type","value","join","formatNumber","console","log","root","document","querySelector","modalRoot","input","form","window","addEventListener","nonNumeric","afterDot","updateInput","e","replacedNonDigits","target","trim","replace","passive","event","getModifierState","key","length","preventDefault","elements","maskedInput"],"sourceRoot":""}